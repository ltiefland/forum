<?php

/**
 * This class represents the User model in the application. It extends the
 * default Laravel Authenticatable class and implements the MustVerifyEmail
 * contract. The model includes functionality for factory creation, profile
 * photo management, notifications, and two-factor authentication.
 *
 * Relationships:
 * - One-to-Many with the Post, Comment, and Like models.
 *
 * Attributes:
 * - Mass assignable attributes for creating or updating a user.
 * - Hidden attributes during serialization.
 * - Appended attributes when the model is converted to an array.
 *
 * Casts:
 * - Automatically casts `email_verified_at` to a datetime object.
 */

namespace App\Models;

    use /**
     * This interface should be implemented by any user model that wishes to require email verification.
     *
     * Implementing this interface indicates that the user's email address must be verified
     * to access certain functionality or sections of the application.
     *
     * Classes implementing this interface can utilize email verification mechanisms
     * provided by Laravel.
     */
        Illuminate\Contracts\Auth\MustVerifyEmail;
    use /**
     * Trait HasFactory
     *
     * This trait enables the ability to define a factory for the Eloquent model
     * associated with a Laravel application. Factories provide a fluent way
     * to generate model instances for testing and seeding databases.
     *
     * Usage of this trait simplifies testing and seeding by automatically
     * associating the model to a factory, avoiding manual instantiation.
     *
     * To use this trait, the Eloquent model must define a factory class mapped
     * to it, which will handle the generation of dummy model instances.
     */
        Illuminate\Database\Eloquent\Factories\HasFactory;
    use /**
     * Define a one-to-many relationship.
     *
     * A "has-many" relationship is used when one model owns any number of another model.
     * For example, a `User` model might own many `Post` models.
     *
     * @param string $related The related model class.
     * @param string|null $foreignKey The foreign key on the related model.
     * @param string|null $localKey The local key on the parent model.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
        Illuminate\Database\Eloquent\Relations\HasMany;
    use /**
     * Class User
     *
     * This class represents the authenticated user model for the application.
     * It extends the base Authenticatable class provided by Laravel's foundation.
     *
     * Laravel Version: 11.11.1
     * - Application Name: Laravel
     * - Database: MySQL
     * - Queue Connection: Sync
     *
     * This model is used for handling user authentication and authorizations.
     * It can be extended to include additional user-specific behaviors or configurations.
     *
     * Extends:
     * Illuminate\Foundation\Auth\User (Authenticatable)
     */
        Illuminate\Foundation\Auth\User as Authenticatable;
    use /**
     * Class Notifiable
     *
     * This trait is used within models to allow them to send notifications.
     * It provides methods to notify users through a variety of notification channels.
     *
     * @mixin \Illuminate\Database\Eloquent\Model
     */
        Illuminate\Notifications\Notifiable;
    use /**
     * Trait Laravel\Fortify\TwoFactorAuthenticatable
     *
     * Provides functionality for handling two-factor authentication within a user model.
     *
     * This trait enables the management of two-factor authentication tokens, including:
     * - Enabling two-factor authentication for a user.
     * - Generating and validating authentication codes.
     * - Managing recovery codes in case of authentication code absence.
     *
     * Usage:
     * This trait is typically used in conjunction with Laravel Fortify to implement
     * two-factor authentication in a Laravel application.
     *
     * Requirements:
     * - Ensure the model using this trait has the required database columns for storing
     *   two-factor secret, recovery codes, and related data.
     * - The application must have a proper configuration for Fortify two-factor authentication.
     *
     * Notes:
     * - Two-factor authentication enhances the security of user accounts by requiring an additional
     *   token/code (e.g., generated by an authenticator app) apart from the regular password.
     * - Ensure the secret and recovery codes are securely encrypted and stored in the database.
     */
        Laravel\Fortify\TwoFactorAuthenticatable;
    use /**
     * Trait Laravel\Jetstream\HasProfilePhoto
     *
     * Provides functionality for managing and retrieving profile photo attributes for a user model.
     * Ensures default placeholder profile photos are used when no custom profile photo is set.
     * Allows for file upload and deletion related to the profile photo, utilizing file storage mechanisms.
     *
     * Methods:
     * - profilePhotoUrl(): Retrieves the URL to the user's profile photo or a default placeholder.
     * - deleteProfilePhoto(): Handles the deletion of the user's profile photo if it exists.
     * - getProfilePhotoUrlAttribute(): Accessor for the profile photo URL attribute.
     */
        Laravel\Jetstream\HasProfilePhoto;

    /**
     *
     */
    class User extends Authenticatable implements MustVerifyEmail
    {
        use HasFactory;
        use HasProfilePhoto;
        use Notifiable;
        use TwoFactorAuthenticatable;

        /**
         * The attributes that are mass assignable.
         *
         * @var array<int, string>
         */
        protected $fillable = [
            'name',
            'email',
            'password',
        ];

        /**
         * The attributes that should be hidden for serialization.
         *
         * @var array<int, string>
         */
        protected $hidden = [
            'password',
            'remember_token',
            'two_factor_recovery_codes',
            'two_factor_secret',
        ];

        /**
         * The accessors to append to the model's array form.
         *
         * @var array<int, string>
         */
        protected $appends = [
            'profile_photo_url',
        ];

        /**
         *
         */
        public function posts(): HasMany
        {
            return $this->hasMany( Post::class );
        }

        /**
         *
         */
        public function comments(): HasMany
        {
            return $this->hasMany( Comment::class );
        }

        /**
         *
         */
        protected function casts(): array
        {
            return [
                'email_verified_at' => 'datetime',
            ];
        }

        /**
         *
         */
        public function likes(): HasMany
        {
            return $this->hasMany( Like::class );
        }
    }
